x-default: &default
  networks:
    - kong-network
  restart: on-failure
x-kong-env: &kong-env
  KONG_DATABASE: postgres
  KONG_PG_HOST: database
  KONG_PG_PASSWORD: kong
  KONG_PASSWORD: kong
x-otel-env: &otel-env
  OTEL_TRACES_EXPORTER: otlp
  OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4318
  OTEL_NODE_RESOURCE_DETECTORS: env,host,os
  NODE_OPTIONS: --require @opentelemetry/auto-instrumentations-node/register

networks:
  kong-network:

services:
  catalogue:
    <<: *default
    image: shuheikawamura243/catalogue:1.2.0
    container_name: catalogue
    ports:
      - 3001:3001
    environment:
      <<: *otel-env
      OTEL_SERVICE_NAME: catalogue

  carts:
    <<: *default
    image: shuheikawamura243/carts:1.2.0
    container_name: carts
    ports:
      - 3002:3002
    environment:
      <<: *otel-env
      OTEL_SERVICE_NAME: carts
  
  orders:
    <<: *default
    image: shuheikawamura243/orders:1.2.0
    container_name: orders
    ports:
      - 3003:3003
    environment:
      <<: *otel-env
      OTEL_SERVICE_NAME: orders
  
  k6:
    <<: *default
    image: grafana/k6
    container_name: k6
    command:
      - run
      - -o
      - experimental-prometheus-rw
      - /app/script.ts
    environment:
      GATEWAY_ENDPOINT: http://gateway:8000
      K6_PROMETHEUS_RW_SERVER_URL: http://prometheus:9090/api/v1/write
    volumes:
      - ./scenario/01-average-tps.ts:/app/script.ts
    depends_on:
      - gateway
      - catalogue
      - carts
      - orders

  database:
    <<: *default
    image: postgres:16
    container_name: database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 30s
      retries: 3
  migrations:
    <<: *default
    image: &kong-gateway-image kong/kong-gateway:3.11.0.0
    container_name: migrations
    depends_on:
      - database
    command: kong migrations bootstrap
    environment:
      <<: *kong-env
  gateway:
    <<: *default
    image: *kong-gateway-image
    container_name: gateway
    depends_on:
      - migrations
    ports:
      - 8000:8000
      - 8001:8001
      - 8002:8002
      - 8100:8100 # Status API
    environment:
      <<: *kong-env
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_HOST: http://localhost:8002
      # Kong Gateway License Key, if you have
      KONG_LICENSE_DATA: ${KONG_LICENSE_DATA:-}
      # Enable tracing
      KONG_TRACING_INSTRUMENTATIONS: all
      KONG_TRACING_SAMPLING_RATE: 1.0
      # Enable Status API for Data Plane
      KONG_STATUS_LISTEN: 0.0.0.0:8100
  deck:
    <<: *default
    image: kong/deck:v1.49.0
    container_name: deck
    working_dir: /files
    volumes:
      - ./config/kong/kong.yaml:/files/kong.yaml
    command: ["gateway", "sync", "--kong-addr", "http://gateway:8001", "kong.yaml"]
    depends_on:
      - gateway

  # --- Redis ---
  redis:
    <<: *default
    image: redis:8.0.2
    container_name: redis
    ports:
      - 6379:6379

  # --- Tempo ---
  tempo-init:
    <<: *default
    image: &tempoImage grafana/tempo:2.8.0
    container_name: tempo_init
    user: root
    entrypoint:
      - chown
      - 10001:10001
      - /var/tempo
  memcached:
    <<: *default
    image: memcached:1.6.38
    container_name: memcached
    ports:
      - "11211:11211"
    environment:
      - MEMCACHED_MAX_MEMORY=64m # Set the maximum memory usage
      - MEMCACHED_THREADS=4 # Number of threads to use
  tempo:
    <<: *default
    image: *tempoImage
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./config/tempo/tempo.yaml:/etc/tempo.yaml
    ports:
      - 4317 # gRPC
      - 4318 # HTTP
    depends_on:
      - tempo-init

  # --- Prometheus ---
  prometheus:
    <<: *default
    image: prom/prometheus:v3.4.1
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    volumes:
      - ./config/prometheus/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - 9090:9090

  # --- Fluent Bit ---
  fluent-bit:
    <<: *default
    image: fluent/fluent-bit:3.1.2
    container_name: fluent-bit
    command:
      - "--config=/fluent-bit/etc/fluent-bit.yaml"
    volumes:
      - ./config/fluent-bit/fluent-bit.yaml:/fluent-bit/etc/fluent-bit.yaml

  # --- Loki ---
  loki-init:
    <<: *default
    image: &lokiImage grafana/loki:3.5.1
    container_name: loki_init
    user: root
    entrypoint:
      - chown
      - 10001:10001
      - /tmp/loki
  loki:
    <<: *default
    container_name: loki
    image: *lokiImage
    command: "-config.file=/etc/loki/loki.yaml"
    environment:
      LOG_CLUSTER_DEPTH: "8"
      LOG_SIM_TH: "0.3"
    volumes:
      - ./config/loki/loki.yaml:/etc/loki/loki.yaml
    ports:
      - 3100
      - 7946
      - 9095
    depends_on:
      - loki-init

  # --- OpenTelemetry Collector ---
  otel-collector:
    <<: *default
    image: otel/opentelemetry-collector-contrib:0.128.0
    container_name: otel-collector
    volumes:
      - ./config/otel-collector/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - 4317:4317
      - 4318:4318
      - 8888:8888
      - 8889:8889

  # --- Grafana ---
  grafana:
    <<: *default
    image: grafana/grafana:12.0.1
    container_name: grafana
    volumes:
      - ./config/grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./config/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
      GF_AUTH_DISABLE_LOGIN_FORM: true
    ports:
      - 3000:3000
